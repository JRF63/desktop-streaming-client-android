plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.debug.myapplication"
        namespace "com.debug.myapplication"
        minSdk 23
        targetSdk 33
        ndkVersion "23.1.7779620"
        ndk {
            abiFilters "x86_64", "arm64-v8a"
        }
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    flavorDimensions "abi"
    productFlavors {
        arm64_v8a {
            ndk {
                abiFilters "arm64-v8a"
            }
        }
        x86_64 {
            ndk {
                abiFilters "x86_64"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding true
    }
}

android.applicationVariants.all { variant ->
    def arch = variant.productFlavors.name[0]
    if (arch == "arm64_v8a") {
        arch = "arm64-v8a" // replace `_` with `-`
    }

    def triple = ndkTriple(arch)
    def isRelease = variant.buildType.name == "release"

    def argsList = ["build", "--target", triple]
    if (isRelease) {
        argsList.add("--release")
    }

    variant.getPreBuildProvider().configure() {
        // Run cargo only on the current variant being built
        doFirst {
            exec {
                workingDir "src/main/rust"
                executable "cargo"
                args argsList
                environment[cargoLinkerEnvVarKey(triple)] = clangBinary(triple, variant.mergedFlavor.minSdkVersion.apiLevel)
                environment["CC"] = clangBinary(triple, variant.mergedFlavor.minSdkVersion.apiLevel)
                environment["AR"] = arBinary()
            }
            copy {
                from "src/main/rust/target/${triple}/${isRelease ? 'release' : 'debug'}"
                into "src/${isRelease ? 'main' : 'debug'}/jniLibs/${arch}"
                include "*.so"
            }
        }
    }
}

def ndkTriple(arch) {
    if (arch == "arm64-v8a") {
        return "aarch64-linux-android"
    } else if (arch == 'x86_64') {
        return "x86_64-linux-android"
    } else {
        throw GradleException('Unsupported CPU architecture')
    }
}

def hostOs() {
    def osName = System.properties["os.name"].toLowerCase()
    if (osName.contains("linux")) {
        return "linux"
    } else if (osName.contains("mac")) {
        return "darwin"
    } else if (osName.contains("windows")) {
        return "windows"
    }
    throw GradleException("Unsupported OS")
}

def ndkToolchainDir() {
    android.ndkDirectory.toPath().resolve("""toolchains/llvm/prebuilt/${hostOs()}-x86_64""")
}

static def cargoLinkerEnvVarKey(triple) {
    "CARGO_TARGET_${triple.replace('-', '_').toUpperCase()}_LINKER".toString()
}

def clangBinary(triple, sdk) {
    def ext = hostOs().contains("windows") ? ".cmd" : ""
    ndkToolchainDir().resolve("bin/${triple}${sdk}-clang${ext}")
}

def arBinary() {
    def ext = hostOs().contains("windows") ? ".exe" : ""
    ndkToolchainDir().resolve("bin/llvm-ar${ext}")
}